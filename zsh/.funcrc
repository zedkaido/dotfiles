# vim: filetype=sh

szsh() {
	source ~/.zshrc
}

f() {
	echo "find . -iname \"*$1*\""
	find . -iname "*$1*"
}

status() {
	if [ -n "$1" ]; then
		printf "$1" > ~/SESSION
	else
		echo "what's the status?"
	fi
}

log() {
	if [ -n "$1" ]; then
		output_directory="$HOME/zk/garden/"
		mkdir -p "$output_directory"
		current_date=$(date +'%Y-%m-%d')
		output_file="$output_directory$current_date.md"
		now=$(date +'%H:%M:')
		printf "\n* %s\n\t* LOG: %s;\n" "$now" "$1" >> "$output_file"
		printf "$1" > ~/SESSION
	else
		echo "log what?"
	fi
}

worklog() {
	if [ -n "$1" ]; then
		output_directory="$HOME/zk/garden/"
		mkdir -p "$output_directory"
		current_date=$(date +'%Y-%m-%d')
		output_file="${output_directory}WL-${current_date}.md"
		now=$(date +'%H:%M:')
		printf "\n* %s\n\t* LOG: %s;\n" "$now" "$1" >> "$output_file"
		printf "$1" > ~/SESSION
	else
		echo "log what?"
	fi
}

datediff () {
	echo $(( ($(date -u -d $1 +%s) - $(date -u -d $2 +%s)) / 86400))
}

function nextDay() {
	local now=$(date +"%Y-%m-%dT%H:%M:%SZ")
	local tomorrow=$(date -v "+1d" +"%Y-%m-%dT%H:%M:%SZ")
	echo $tomorrow
}

toHex() {
	echo -n $1 | od -A n -t x1
}

hexToString() {
	local hex_string="$1"
	local ascii_string=""
	hex_string=$(echo "$hex_string" | tr -d '[:space:]')
	if [[ ! $hex_string =~ ^[0-9a-fA-F]+$ ]]; then
		echo "Error: Invalid hexadecimal string."
		return 1
	fi
	# two characters at a time (one bite)
	for (( i = 0; i < ${#hex_string}; i += 2 )); do
		byte="${hex_string:$i:2}"
		ascii_string+=$(printf "\\x$byte")
	done
	echo -e "$ascii_string"
}

ex () {
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2) tar xjf $1 ;; 
			*.tar.gz) tar xzf $1 ;;
			*.bz2) bunzip2 $1 ;;
			*.rar) unrar x $1 ;;
			*.gz) gunzip $1 ;;
			*.tar) tar xf $1 ;;
			*.tbz2) tar xjf $1 ;;
			*.tgz) tar xzf $1 ;; 
			*.zip) unzip $1 ;;
			*.Z) uncompress $1 ;;
			*) echo "'$1' cannot be extracted via ex()" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

testcolors () {
	awk 'BEGIN{
	s="/\\/\\/\\/\\/\\"; s=s s s s s s s s;
	for (colnum = 0; colnum<77; colnum++) {
		r = 255-(colnum*255/76);
		g = (colnum*510/76);
		b = (colnum*255/76);
		if (g>255) g = 510-g;
			printf "\033[48;2;%d;%d;%dm\033[38;2;%d;%d;%dm%s\033[0m", r,g,b, r,g,b, substr(s,colnum%8+1,1);
		}
		printf "\n";
	}'
}

lfcd () {
	tmp="$(mktemp -uq)"
	trap 'rm -f $tmp >/dev/null 2>f1' HUP INT QUIT TERM EXIT
	lf -last-dir-path="$tmp" "$@"
	if [ -f "$tmp" ]; then
		dir="$(cat "$tmp")"
		[ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
	fi
}
